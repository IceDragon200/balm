local Luna = require("balm/luna")
local m = require("balm/m/string/hex_encoding")

local case = Luna:new("balm.m.string/hex_encoding")

case:describe("hex_pair_to_byte/1", function (t2)
  t2:test("can decode a simple hexpair string to byte", function (t3)
    t3:assert_eq(0, m.hex_pair_to_byte("00"))
    t3:assert_eq(10, m.hex_pair_to_byte("0A"))
    t3:assert_eq(15, m.hex_pair_to_byte("0F"))
    t3:assert_eq(16, m.hex_pair_to_byte("10"))
    t3:assert_eq(127, m.hex_pair_to_byte("7F"))
    t3:assert_eq(128, m.hex_pair_to_byte("80"))
    t3:assert_eq(255, m.hex_pair_to_byte("FF"))
  end)
end)

case:describe("hex_encode", function (t2)
  t2:test("can encode a string has a series of hex digits", function (t3)
    t3:assert_eq("", m.hex_encode(""))
    t3:assert_eq("007F80FF", m.hex_encode("\x00\x7F\x80\xFF"))
    t3:assert_eq("DEADBEEF", m.hex_encode("\xDE\xAD\xBE\xEF"))
    t3:assert_eq("BACDEF", m.hex_encode("\xBA\xCD\xEF"))
  end)

  t2:test("can encode a string has a series of hex digits with a spacer", function (t3)
    t3:assert_eq("", m.hex_encode("", " "))
    t3:assert_eq("00 7F 80 FF", m.hex_encode("\x00\x7F\x80\xFF", " "))
  end)
end)

case:describe("hex_decode", function (t2)
  t2:test("can decode a hex encoded string", function (t3)
    t3:assert_eq("", m.hex_decode(""))
    t3:assert_eq("\x00\x7F\x80\xFF", m.hex_decode("007F80FF"))
    t3:assert_eq("\x00\x7F\x80\xFF", m.hex_decode("007f80ff"))
    t3:assert_eq("\xDE\xAD\xBE\xEF", m.hex_decode("DEADBEEF"))
  end)
end)

case:describe("hex_escape", function (t2)
  t2:test("hex escape a string", function (t3)
    t3:assert_eq("", m.hex_escape(""))
    t3:assert_eq("Hello\\x00\\x80\\xFFWorld", m.hex_escape("Hello\000\128\255World"))
    t3:assert_eq("\\x32\\x5C\\x33", m.hex_escape("2\\3", "all"))
    t3:assert_eq("2\\\\3", m.hex_escape("2\\3", "non-ascii"))
  end)
end)

case:describe("hex_unescape", function (t2)
  t2:test("hex unescape a string", function (t3)
    t3:assert_eq("", m.hex_unescape(""))
    t3:assert_eq("Hello\000\128\255World", m.hex_unescape("Hello\\x00\\x80\\xFFWorld"))
    t3:assert_eq("\000\016\128\255", m.hex_unescape("\\x00\\x10\\x80\\xFF"))
  end)
end)

case:execute()
case:display_stats()
case:maybe_error()
