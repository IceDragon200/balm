local M = require("balm/u/string_buffer")
local Luna = require("balm/luna")

local case = Luna:new("balm.u.StringBuffer")

case:describe("&new/2", function (t2)
  t2:test("creates a new string buffer", function (t3)
    assert(M.new, "expected a new/2 function")
    local buf = M:new("initial", "a")
    t3:assert(buf, "expected a buffer")
  end)
end)

case:describe("#tell/0", function (t2)
  t2:test("reports the current position of the buffer", function (t3)
    assert(M.instance_class.tell, "expected a tell/1 function")
    local buf = M:new("initial", "a")
    assert(buf.tell, "expected a :tell/0 function on instance")
    t3:assert_eq(8, buf:tell())
  end)
end)

case:describe("#write/1", function (t2)
  t2:test("writes new data to buffer", function (t3)
    assert(M.instance_class.write, "expected a write/2 function")
    local buf = M:new("", "w")
    assert(buf.write, "expected a :write/1 function on instance")
    local success, err = buf:write("Hello")
    t3:assert(success, "expected write to be successful")
    t3:assert(6 == buf:tell())
    local success, err = buf:write(", World")
    t3:assert(success, "expected write to be successful")
    t3:assert(13 == buf:tell())
    t3:assert("Hello, World" == buf.data)
  end)
end)

case:describe("#read/1", function (t2)
  t2:test("reads data from buffer", function (t3)
    assert(M.instance_class.read, "expected a read/2 function")
    local buf = M:new("Hello, World", "r")
    assert(buf.read, "expected a :read/1 function")
    local data, bytes_read = buf:read(5)
    t3:assert_eq(5, bytes_read)
    t3:assert_eq("Hello", data)
    local data, bytes_read = buf:read(7)
    t3:assert(", World", data)
    t3:assert_eq(7, bytes_read)
  end)
end)

case:describe("#scan/1", function (t2)
  t2:test("scans a pattern in the stream", function (t3)
    local buf = M:new("A, B, String, Seed")
    t3:assert_eq("A", buf:scan("%w+"))
    buf:skip(",%s+")
    t3:assert_eq("B", buf:scan("%w+"))
    buf:skip(",%s+")
    t3:assert_eq("String", buf:scan("%w+"))
    buf:skip(",%s+")
    local s = buf:scan("%w+")
    t3:assert_eq("Seed", s)
  end)
end)

case:describe("#scan_until/1", function (t2)
  t2:test("scans everything up to the specified string", function (t3)
    local buf = M:new("A, B, String, Seed")
    local s = buf:scan_until(",")
    t3:assert_eq("A,", s)
    local s = buf:scan_until(",")
    t3:assert_eq(" B,", s)
    local s = buf:scan_until(",")
    t3:assert_eq(" String,", s)
  end)
end)

case:execute()
case:display_stats()
case:maybe_error()
